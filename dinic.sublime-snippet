<snippet>
    <content><![CDATA[
template <typename T> 
class Max_flow {
private:
    struct Edge {
        int v, u, idx;
        T c, f;
    };

    const int INF = 1e9;
    vector <vector <int>> gr;
    vector <Edge> e;
    vector <int> dst;

    bool bfs(int s, int t) {
        dst = vector <int> (sz(gr), INF);
        dst[s] = 0;
        deque <int> q = {s};
        while (!q.empty()) {
            int v = q.front();
            q.pop_front();
            for (int i : gr[v]) {
                int u = e[i].u;
                T c = e[i].c, f = e[i].f;
                if (c - f > 0 && dst[v] + 1 < dst[u]) {
                    q.pb(u);
                    dst[u] = dst[v] + 1;
                }
            }
        }
        return dst[t] < INF;
    }

    vector <int> lst;

    T dfs(int v, int t, T delta) {
        if (v == t || delta == 0)
            return delta;
        for (; lst[v] < sz(gr[v]); ++lst[v]) {
            int i = gr[v][lst[v]];
            int u = e[i].u;
            T c = e[i].c, f = e[i].f;
            if (dst[u] == dst[v] + 1 && c - f > 0) {
                if (T cur_delta = dfs(u, t, min(delta, c - f))) {
                    e[i].f += cur_delta;
                    e[i ^ 1].f -= cur_delta;
                    return cur_delta;
                }
            }
        }
        return 0;
    }

    T find_path(int s, int t, vector <vector <int>>& paths) {
        vector <bool> used(sz(gr));
        deque <int> edges;
        int v = s;
        while (!used[v] && v != t) {
            used[v] = true;
            int nxt = -1;
            for (int i : gr[v]) {
                int u = e[i].u;
                T f = e[i].f;
                if (f > 0) {
                    nxt = i;
                    break;
                }
            }
            if (nxt == -1)
                return 0;
            edges.pb(nxt);
            v = e[nxt].u;
        }
        if (used[v])
            while (e[edges[0]].v != v)
                edges.pop_front();
        T delta = numeric_limits<T>::max();
        for (int i : edges)
            chkmin(delta, e[i].f);
        for (int i : edges) {
            e[i].f -= delta;
            e[i ^ 1].f += delta;
        }
        if (!used[v]) {
            paths.pb({});
            paths.back().pb(e[0].v);
            for (auto i : edges)
                paths.back().pb(e[i].u);
        }
        return delta;
    }

public:
    Max_flow(int _n) {
        gr.resize(_n);
    }

    T dinic(int s, int t) {
        T ans = 0;
        while (bfs(s, t)) {
            lst = vector <int> (sz(gr));
            while (T cur = dfs(s, t, numeric_limits<T>::max()))
                ans += cur;
        }
        return ans;
    }

    vector <vector <int>> decompose(int s, int t) {
        vector <vector <int>> paths;
        while (find_path(s, t, paths));
        return paths; 
    }

    void add_edge(int v, int u, T c, int i = -1) {
        gr[v].pb(sz(e));
        e.pb({v, u, i, c, 0});
        gr[u].pb(sz(e));
        e.pb({u, v, i, 0, 0});
    }
};
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>DINIC</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
